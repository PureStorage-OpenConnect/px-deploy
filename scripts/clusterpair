# Configures cluster pairs between cluster 1 and cluster 2
# this script is expected to run on master-2

AWS_ACCESS_KEY=$(sed -n 's/aws_access_key_id[ =]*//p' /root/.aws/credentials 2>/dev/null | head -1)
AWS_SECRET_KEY=$(sed -n 's/aws_secret_access_key[ =]*//p' /root/.aws/credentials 2>/dev/null | head -1)

echo "Creating bucket '$DR_BUCKET' in region 'us-east-1', if it does not exist"
aws s3 mb s3://$DR_BUCKET --region us-east-1
BUCKET_REGION=$(aws s3api get-bucket-location --bucket $DR_BUCKET --output text)
# Region us-east-1 returns "None" instead of the region name
if [ "$BUCKET_REGION" = "None" ]; then
  BUCKET_REGION="us-east-1"
fi
echo "Bucket region: $BUCKET_REGION"

scp root@master-1:/root/.kube/config /tmp/dest_kubeconfig

if [ "$platform" = eks ] || [ "$platform" = ocp4 ]; then
  # expose local px api on svc type LB
  kubectl patch stc $(kubectl get stc -n portworx -o jsonpath='{.items[].metadata.name}') -n portworx --type='json' -p '[{"op":"add","path":"/metadata/annotations/portworx.io~1service-type","value":"portworx-api:LoadBalancer"}]'
  # expose remote px api on svc type LB
  kubectl --kubeconfig /tmp/dest_kubeconfig patch stc $(kubectl --kubeconfig /tmp/dest_kubeconfig get stc -n portworx -o jsonpath='{.items[].metadata.name}') -n portworx --type='json' -p '[{"op":"add","path":"/metadata/annotations/portworx.io~1service-type","value":"portworx-api:LoadBalancer"}]'
  
  echo "waiting for local px api lb service creation"
  while ! kubectl wait -n portworx --for=jsonpath=.status.loadBalancer.ingress[].hostname services/portworx-api; do
    echo "waiting for local px api lb service creation"
  done

  echo "waiting for remote px api lb service creation"
  while ! kubectl --kubeconfig /tmp/dest_kubeconfig wait -n portworx --for=jsonpath=.status.loadBalancer.ingress[].hostname services/portworx-api; do
    echo "waiting for remote px api lb service creation"
  done

  LOCAL_EP=$(kubectl get svc portworx-api -n portworx -ojson | jq -r ".status.loadBalancer.ingress[0].hostname")
  REMOTE_EP=$(kubectl --kubeconfig /tmp/dest_kubeconfig get svc portworx-api -n portworx -ojson | jq -r ".status.loadBalancer.ingress[0].hostname")

  echo "waiting for local portworx api lb service to respond http 200 ELB $LOCAL_EP"
  while [ $(curl -s -o /dev/null -w "%{http_code}" $LOCAL_EP:9021/v1/identities/version) != "200" ]; do
    echo "waiting for local portworx api lb service to respond http 200 ELB $LOCAL_EP"
    sleep 5
  done
  
  echo "waiting for remote portworx api lb service to respond http 200. ELB $REMOTE_EP"
  while [ $(curl -s -o /dev/null -w "%{http_code}" $REMOTE_EP:9021/v1/identities/version) != "200" ]; do
    echo "waiting for remote portworx api lb service to respond http 200. ELB $REMOTE_EP"
    sleep 5
  done
#elif [ "$platform" = rancher ]; then
#else
#  host=$(kubectl get nodes -l 'node-role.kubernetes.io/worker in (worker,true)' -o json |jq -r '.items[0].status.addresses[] | select(.type=="InternalIP") | .address')
fi

#improvement: we may try to detect if DR licenses are enabled on both sides -> px api?
if [ -z "$licenses" ]; then
  echo '$licenses is empty. creating migration clusterpair'
  MODE="migration"
else
  echo '$licenses is set. creating migration clusterpair - please ensure license is valid'
  MODE="async-dr"
fi

if [ "$platform" = eks ]; then
  kubectl create secret generic --from-file=$HOME/.aws/credentials -n portworx aws-creds
  kubectl --kubeconfig /tmp/dest_kubeconfig create secret generic --from-file=$HOME/.aws/credentials -n portworx aws-creds
  
  kubectl patch stc $(kubectl get stc -n portworx -o jsonpath='{.items[].metadata.name}') -n portworx --type='json' -p '[{"op":"add","path":"/spec/stork/volumes","value":[{"mountPath":"/root/.aws","name":"aws-creds","secret":{"secretName":"aws-creds"}}]}]'
  kubectl patch stc $(kubectl --kubeconfig /tmp/dest_kubeconfig get stc -n portworx -o jsonpath='{.items[].metadata.name}') -n portworx --type='json' -p '[{"op":"add","path":"/spec/stork/volumes","value":[{"mountPath":"/root/.aws","name":"aws-creds","secret":{"secretName":"aws-creds"}}]}]'
fi

storkctl create clusterpair remotecluster --namespace kube-system --dest-kube-file /tmp/dest_kubeconfig --src-kube-file /root/.kube/config --provider s3 --s3-endpoint s3.amazonaws.com --s3-access-key $AWS_ACCESS_KEY --s3-secret-key $AWS_SECRET_KEY --s3-region $BUCKET_REGION  --bucket $DR_BUCKET --mode $MODE
