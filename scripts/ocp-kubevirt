OPVERSION=$(kubectl get packagemanifests.packages.operators.coreos.com kubevirt-hyperconverged -o json | jq -r '.status.channels[] | select(.name=="stable") | .currentCSV')

kubectl patch storageclass gp3-csi -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "false"}}}'
kubectl apply -f /assets/kubevirt/px-rwx-kubevirt.yml

echo "current kubevirt-hyperconverged operator version is $OPVERSION"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: openshift-cnv
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: kubevirt-hyperconverged-group
  namespace: openshift-cnv
spec:
  targetNamespaces:
    - openshift-cnv
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: hco-operatorhub
  namespace: openshift-cnv
spec:
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  name: kubevirt-hyperconverged
  startingCSV: $OPVERSION
  channel: "stable"
EOF

curl -Lo /usr/bin/virtctl https://github.com/kubevirt/kubevirt/releases/download/v1.1.1/virtctl-v1.1.1-linux-amd64
chmod 755 /usr/bin/virtctl

echo "waiting for kubevirt-hyperconverged operator readiness"
while ! kubectl wait clusterserviceversions.operators.coreos.com $OPVERSION -n openshift-cnv --timeout=300s --for=jsonpath='{.status.phase}'='Succeeded'; do
  sleep 2
done

cat <<EOF | kubectl apply -f -
apiVersion: hco.kubevirt.io/v1beta1
kind: HyperConverged
metadata:
  name: kubevirt-hyperconverged
  namespace: openshift-cnv
spec:
EOF

sleep 2

# check if hyperconverged CRD has status condition containing ReconcileCompleted/True/Available
# TODO: maybe there is a better way to detect if this CRD is ready?
HC=$(kubectl get hyperconvergeds.hco.kubevirt.io kubevirt-hyperconverged -n openshift-cnv -ojson | jq -r '.status.conditions[] | select((.reason=="ReconcileCompleted") and (.status=="True") and (.type=="Available")) | .status')

while [ ! "$HC" == "True" ]; do
  echo "Waiting for hyperconverged CRD to complete reconcile"
  sleep 5
  HC=$(kubectl get hyperconvergeds.hco.kubevirt.io kubevirt-hyperconverged -n openshift-cnv -ojson | jq -r '.status.conditions[] | select((.reason=="ReconcileCompleted") and (.status=="True") and (.type=="Available")) | .status')
done

kubectl apply -f /assets/kubevirt/storageprofile.yml

# add colored console notification on OCP GUI
if [ $cluster == "1" ]; then
  bgcolor='#fe5000'
else
  bgcolor='#40b605'
fi

cat <<EOF | kubectl apply -f -
apiVersion: console.openshift.io/v1
kind: ConsoleNotification
metadata:
  name: clusternumber
spec:
  text: cluster-$cluster
  location: BannerTop
  color: '#fff'
  backgroundColor: '$bgcolor'
EOF
